class TableStatus: # Class for representing detail of all tables (capacity, table number etc.)
    def __init__(self, table_number, capacity): 
        self.table_number = table_number # Self used to assign value to instance attribute
        self.capacity = capacity
        self.slots = [None] * 10 # 10 possible slots from 6 to 10:30, None means free 

    @staticmethod
    def time_to_slot(time): # To convert booking time to slot, no self inputted as it is a static function
        hour, minute = map(int, time.split(':'))
        index = (hour - 18) * 2 + (minute // 30)
        return index
    

    def availability(self, booking_time, duration_hours):  # Function to check availability of inputted booking
        start_index = TableStatus.time_to_slot(booking_time)
        slots_needed = int(duration_hours * 2) # Convert duration to number of slots needed

        # Increment through slots for availability
        for i in range(start_index, start_index + slots_needed):
            if i >= len(self.slots) or self.slots[i] is not None:
                return False  # Slot not available
        return True
    
    def book_table(self, booking): # Function to put booking into slots
        start_index = TableStatus.time_to_slot(booking.time)
        slots_needed = int(booking.duration * 2) # Check how many slots required (depending on standard or speedy)
        
        for i in range(start_index, start_index + slots_needed):
            if i < len(self.slots):  
                self.slots[i] = booking  # Stores booking details in occupied slot

    def get_booking_info(self, slot_index): # Function to get information of each booking
        booking = self.slots[slot_index]
        if booking:
            return {'surname': booking.surname, 'number_of_people': booking.number_of_people, 'type': booking.booking_type}
        return None

    
    def display_table_bookings(self): # To display the table
        for i, available in enumerate(self.slots):
            hour = 18 + i // 2
            minute = "00" if i % 2 == 0 else "30"
            print(f"{hour}:{minute} - {'Available' if available else 'Booked'}")

class Booking_Details: # Class created to form the basis of each booking
    def __init__(self, time, no_of_people, booking_type, surname, speedy_option=None):
        self.time = time
        self.number_of_people = no_of_people
        self.surname = surname
        self.speedy_option = speedy_option
        if booking_type.lower() == 'standard':
            self.duration = 1.5
            self.booking_type = 'standard'
        elif booking_type.lower() == 'speedy' and speedy_option in ['A', 'B', 'C']:
            self.duration = 1
            self.booking_type = f'speedy({speedy_option})'
        else:
            raise ValueError("Invalid booking type or speedy option.")



class Main_Restaurant: # Class for the main orchestration of the system and handling new bookings
    def __init__(self): # Create table structure: Table(Number, Capacity)
        self.tables = [TableStatus(1, 2), TableStatus(2, 2),  
                       TableStatus(3, 4), TableStatus(4, 4), TableStatus(5, 4),
                       TableStatus(6, 8), TableStatus(7, 8), TableStatus(8, 10)]
        self.bookings = []  # List to hold bookings

    def validate_time(self, booking_time, booking_type):
        try:
            # Attempt to parse the time to ensure correct format
            hour, minute = map(int, booking_time.split(':'))
            if not (18 <= hour < 23) or minute not in [0, 30]:
                print("Invalid time format or time inputted is out of bounds! Please enter time between 18:00 and 22:30 at 0 or 30 minute intervals.")
                return False
        except ValueError:
            # Catch cases where conversion to integer fails due to incorrect format
            print("Invalid time format! Please use HH:MM format, e.g., 20:00 for 8pm.")
            return False
        
        # Construct a valid_times list to hold permissible booking start times
        valid_times = [f"{hour:02d}:{minute:02d}" for hour in range(18, 23) for minute in (0, 30)]
        valid_times.remove("22:30")  # Removing 22:30 since it's not a valid start time for new bookings

        # Check if the specific booking time is in the list of valid times
        if booking_time not in valid_times:
            print("Booking time is not within the operational hours or at the correct intervals.")
            return False

        # Additional rules for specific booking types
        if booking_time == "22:30" and booking_type == 'speedy':
            print("Booked session exceeds restaurant closing time!")
            return False
        if booking_time == "22:00" and booking_type == 'standard':
            print("Standard bookings not allowed at 22:00 due to restaurant closing time.")
            return False

        return True



    def validate_capacity(self, booking, time=None): # Function created to choose which table booking goes depending on capacity
        time = time or booking.time
        filtered_tables = [t for t in self.tables if t.capacity >= booking.number_of_people and 
                           ((1 <= booking.number_of_people <= 2 and t.table_number <= 5) or
                            (booking.number_of_people >= 6 and t.table_number == 8) or
                            (3 <= booking.number_of_people <= 5 and 3 <= t.table_number <= 5) or
                            (booking.number_of_people <= 8 and 6 <= t.table_number <= 7))]
        filtered_tables.sort(key=lambda t: t.capacity)

        for table in filtered_tables:
            if table.availability(time, booking.duration):
                return table
        # If no table with the right capacity and availability is found, return None
        return None

    def new_booking(self): # Main function to input new booking
        while True:
            booking_time = input("\nEnter booking time (HH:MM, 24hr format, e.g., 20:00 for 8pm): ") 
            booking_type = input("Type of booking (standard or speedy): ").lower()

            while booking_type not in ['standard', 'speedy']:
                print("Invalid booking type. Please select 'standard' or 'speedy'.")
                booking_type = input("Type of booking (standard or speedy): ").lower()

            speedy_option = None
            if booking_type == 'speedy':
                speedy_option = input("Choose a speedy option (A, B, or C): ").upper()
                while speedy_option not in ['A', 'B', 'C']:
                    print("Invalid option. Please choose A, B, or C.")
                    speedy_option = input("Choose a speedy option (A, B, or C): ").upper()

            if not self.validate_time(booking_time, booking_type): # Validates time depending on speedy or standard booking
                continue

            try:
                number_of_people = int(input("Number of people: "))
                if not 1 <= number_of_people <= 10: 
                    raise ValueError("Invalid number of people. Must be between 1 and 10.")
            except ValueError as e:
                print(f"Invalid input! Error : {e}")
                continue
            # If all goes well, surname inputted
            surname = input("Enter the surname of the reservation holder: ").strip()
            while not surname:
                print("Surname of reservation holder cannot be empty.")
                surname = input("Enter the surname of the reservation holder: ").strip()

            booking = Booking_Details(booking_time, number_of_people, booking_type, surname, speedy_option)

            # Check if the booking can be accommodated at the requested time
            table = self.validate_capacity(booking)
            if table:
                confirm = input(f"Table {table.table_number} available for {booking.surname} at {booking.time} for a {booking.booking_type} booking. Confirm booking? (y/n): ")
                if confirm.lower() == 'y':
                    self.confirm(table, booking)
                else:
                    print("Booking not confirmed.")
            else:
                # If no table is available, attempt to find an alternative
                if not self.attempt_alternative(booking):
                    print("No available session and unable to find an alternative.")

            # Ask if the user wants to make another booking
            retry = input("Do you want to make another booking? (y/n): ").lower()
            if retry != 'y':
                break


                    
    def confirm(self, table, booking, new_time=None):
        if new_time:
            booking.time = new_time  # Update booking time to the new alternative time
        # Proceed to book the table with updated booking details
        table.book_table(booking)
        self.bookings.append(booking)
        print(f"Booking confirmed for {booking.surname} at table {table.table_number} for a {booking.booking_type} booking at {booking.time}.")
        return True

    def attempt_alternative(self, booking):
        # If the time requested is 6 PM, no earlier time can be suggested, so we directly try a speedy booking if it's a standard booking.
        if booking.time == "18:00" and booking.booking_type == 'standard':
            return self.try_speedy_booking(booking)

        # Suggest a time slot 30 minutes earlier if possible
        earlier_time = self.get_earlier_time(booking.time, 1)
        # Validate if the earlier time slot is valid before suggesting
        if self.validate_time(earlier_time, booking.booking_type) and earlier_time != booking.time:
            # Check for the availability of the earlier time slot
            table = self.validate_capacity(booking, earlier_time)
            if table:
                confirm = input(f"Alternative at {earlier_time}. Confirm? (y/n): ")
                if confirm.lower() == 'y':
                    booking.time = earlier_time
                    self.confirm(table, booking)
                    return True
                else:
                    print("Booking not confirmed.")
                    # If the earlier time slot is rejected, we try for a speedy booking.
                    if booking.booking_type == 'standard':
                        return self.try_speedy_booking(booking)
                    return False
            else:
                # If earlier time is also not available, then we suggest a speedy booking.
                if booking.booking_type == 'standard':
                    return self.try_speedy_booking(booking)
        else:
            # If earlier time is not valid or no earlier time can be suggested, we suggest a speedy booking.
            if booking.booking_type == 'standard':
                return self.try_speedy_booking(booking)

        return False  # No alternative available





    def get_earlier_time(self, time, slots_back): # Simple function to get an earlier time depending on booking misentered
        hour, minute = map(int, time.split(':'))
        minute -= (slots_back * 30)
        while minute < 0:
            hour -= 1
            minute += 60
        return f"{max(hour, 18):02d}:{minute:02d}" 


    def try_speedy_booking(self, booking): # If there is no space for a standard booking, will check for speedy booking
        confirm = input("No standard session space! Attempt speedy booking instead? (y/n): ")
        if confirm.lower() == 'y':
            speedy_option = input("Choose a speedy option (A, B, or C): ").upper()
            while speedy_option not in ['A', 'B', 'C']:
                print("Invalid option. Please choose A, B, or C.")
                speedy_option = input("Choose a speedy option (A, B, or C): ").upper()

            # Create a new Booking_Details object with the correct speedy option
            speedy_booking = Booking_Details(booking.time, booking.number_of_people, 'speedy', booking.surname, speedy_option)
            
            table = self.validate_capacity(speedy_booking)
            if table:
                self.confirm(table, speedy_booking) 
                return True  # Speedy booking confirmed as we assume user wants a speedy booking
            else:
                print("No speedy booking available either, Sorry!") # Possible speedy can't fit!
                return False  # Speedy booking not available
        else:
            print("Booking not confirmed.")
            return False  # Speedy booking not confirmed


    def display_table_overview(self): # Display the table showing the restaurant
        time_slots = [f"{hour:02d}:{minute:02d}" for hour in range(18, 23) for minute in (0, 30)]

        for table in self.tables:
            print(f"\nOverview for Table {table.table_number} (Capacity: {table.capacity}):")
            print(f"{'Time':<10} | {'Surname':<15} | {'People':<7} | {'Type':<10}")
            print("-" * 50)

            for time in time_slots:
                slot_index = TableStatus.time_to_slot(time)
                booking_info = table.get_booking_info(slot_index)
                if booking_info:
                    print(f"{time:<10} | {booking_info['surname']:<15} | {booking_info['number_of_people']:<7} | {booking_info['type']:<10}")
                else:
                    print(f"{time:<10} | {'-':<15} | {'-':<7} | {'-':<10}")




def main():
    restaurant = Main_Restaurant()

    # Display initial table overview before any bookings
    print("Initial Table Overview:")
    restaurant.display_table_overview()

    continue_booking = True

    while continue_booking:
        continue_booking = restaurant.new_booking()

    # Display final table interview after bookins have been made
    print("\nFinal Bookings Overview:")
    restaurant.display_table_overview()

if __name__ == "__main__":
    main()
